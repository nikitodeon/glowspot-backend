# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthModel {
  message: String
  user: UserModel
}

input ChangeEmailInput {
  email: String!
}

input ChangeNotificationsSettingsInput {
  siteNotifications: Boolean!
  telegramNotifications: Boolean!
}

type ChangeNotificationsSettingsResponse {
  notificationSettings: NotificationSettingsModel!
  telegramAuthToken: String
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeProfileInfoInput {
  bio: String!
  displayName: String!
  username: String!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

input CreateEventInput {
  address: String!
  ageRestriction: Float
  city: String
  currency: String
  description: String!
  endTime: DateTime
  eventProperties: [EventProperty!]!
  eventType: EventType!
  isPrivate: Boolean!
  maxParticipants: Float
  paymentType: PaymentType!
  photoUrls: [String!]!
  placeName: String
  price: Float
  startTime: DateTime!
  tags: [String!]!
  title: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeactivateAccountInput {
  email: String!
  password: String!
  pin: String
}

type DeviceModel {
  browser: String!
  os: String!
  type: String!
}

input EnableTotpInput {
  pin: String!
  secret: String!
}

input EventFilterInput {
  ageRestriction: Float
  currency: String
  dateRange: [String]
  eventProperties: [EventProperty!]
  eventType: EventType
  isVerified: Boolean
  location: String
  organizerId: String
  paymentType: PaymentType
  priceRange: [Float!]
  searchQuery: String
  status: EventStatus
}

type EventModel {
  ageRestriction: Float
  createdAt: DateTime!
  currency: String
  description: String!
  endTime: DateTime
  eventProperties: [EventProperty!]!
  eventType: EventType!
  favoritedBy: [UserModel!]
  id: String!
  isPrivate: Boolean!
  isVerified: Boolean!
  location: LocationModel!
  maxParticipants: Float
  organizer: UserModel!
  participants: [UserModel!]
  paymentType: PaymentType!
  photoUrls: [String!]!
  postedDate: DateTime!
  price: Float
  startTime: DateTime!
  status: EventStatus!
  tags: [String!]!
  title: String!
  updatedAt: DateTime!
}

enum EventProperty {
  AGE_18_PLUS
  AGE_21_PLUS
  ALCOHOL_FREE
  CHARITY
  FAMILY_FRIENDLY
  HEALTHY_LIFESTYLE
  INDOOR
  ONLINE
  OUTDOOR
  PET_FRIENDLY
}

enum EventStatus {
  ARCHIVED
  CANCELLED
  COMPLETED
  ONGOING
  UPCOMING
}

enum EventType {
  BOOK_CLUB
  CONCERT
  CYBERSPORT
  DANCE
  EXHIBITION
  FESTIVAL
  KARAOKE
  KIDS_EVENT
  LECTURE
  MEETUP
  MOVIE
  OTHER
  PARTY
  SPORT
  STANDUP
  THEATRE
  WALK
}

type LocationModel {
  address: String
  city: String!
  coordinates: Coordinates!
  createdAt: DateTime!
  id: String!
  placeName: String
  updatedAt: DateTime!
}

input LoginInput {
  login: String!
  password: String!
  pin: String
}

type Mutation {
  addToFavorites(eventId: String!): Boolean!
  changeEmail(data: ChangeEmailInput!): Boolean!
  changeNotificationsSettings(data: ChangeNotificationsSettingsInput!): ChangeNotificationsSettingsResponse!
  changePassword(data: ChangePasswordInput!): Boolean!
  changeProfileAvatar(avatar: Upload!): Boolean!
  changeProfileInfo(data: ChangeProfileInfoInput!): Boolean!
  clearSessionCookie: Boolean!
  createEvent(input: CreateEventInput!, photos: [Upload!]): EventModel!
  createSocialLink(data: SocialLinkInput!): Boolean!
  createUser(data: CreateUserInput!): Boolean!
  deactivateAccount(data: DeactivateAccountInput!): AuthModel!
  deleteEvent(id: String!): Boolean!
  disableTotp: Boolean!
  enableTotp(data: EnableTotpInput!): Boolean!
  leaveEvent(eventId: String!): Boolean!
  loginUser(data: LoginInput!): AuthModel!
  logoutUser: Boolean!
  newPassword(data: NewPasswordInput!): Boolean!
  participateInEvent(eventId: String!): Boolean!
  removeFromFavorites(eventId: String!): Boolean!
  removeProfileAvatar: Boolean!
  removeSession(id: String!): Boolean!
  removeSocialLink(id: String!): Boolean!
  reorderSocialLinks(list: [SocialLinkOrderInput!]!): Boolean!
  resetPassword(data: ResetPasswordInput!): Boolean!
  updateEvent(id: String!, input: UpdateEventInput!, photos: [Upload!]): EventModel!
  updateSocialLink(data: SocialLinkInput!, id: String!): Boolean!
  verifyAccount(data: VerificationInput!): AuthModel!
}

input NewPasswordInput {
  password: String!
  passwordRepeat: String!
  token: String!
}

type NotificationModel {
  createdAt: DateTime!
  id: String!
  isRead: Boolean!
  message: String!
  type: NotificationType!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

type NotificationSettingsModel {
  createdAt: DateTime!
  id: String!
  siteNotifications: Boolean!
  telegramNotifications: Boolean!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

enum NotificationType {
  ENABLE_TWO_FACTOR
  EVENT_CANCELLED
  EVENT_INVITE
  EVENT_REMINDER
  NEW_EVENT_FROM_ORGANIZER
  PAYMENT_SUCCESS
}

enum PaymentType {
  DONATION
  FREE
  PAYMENT_REQUIRED
}

type Query {
  findCurrentSession: SessionModel!
  findNotificationsByUser: [NotificationModel!]!
  findNotificationsUnreadCount: Float!
  findProfile: UserModel!
  findSessionsByUser: [SessionModel!]!
  findSocialLinks: [SocialLinkModel!]!
  generateTotpSecret: TotpModel!
  getAllEvents(filter: EventFilterInput): [EventModel!]!
  getEventById(id: String!): EventModel!
  getEventsWhereIParticipate: [EventModel!]!

  """Возвращает список избранных событий пользователя"""
  getFavoriteEvents: [EventModel!]!
  getMyOrganizedEvents: [EventModel!]!
}

input ResetPasswordInput {
  email: String!
}

type SessionMetadataModel {
  device: DeviceModel!
  ip: String!
  location: UserLocationModel!
}

type SessionModel {
  createdAt: String!
  id: ID!
  metadata: SessionMetadataModel!
  userId: String!
}

input SocialLinkInput {
  title: String!
  url: String!
}

type SocialLinkModel {
  createdAt: DateTime!
  id: ID!
  position: Float!
  title: String!
  updatedAt: DateTime!
  url: String!
  userId: String!
}

input SocialLinkOrderInput {
  id: String!
  position: Float!
}

type TotpModel {
  qrcodeUrl: String!
  secret: String!
}

input UpdateEventInput {
  address: String!
  ageRestriction: Float
  city: String
  currency: String
  description: String!
  endTime: DateTime
  eventProperties: [EventProperty!]!
  eventType: EventType!
  isPrivate: Boolean!
  maxParticipants: Float
  paymentType: PaymentType!
  photoUrls: [String!]!
  placeName: String
  price: Float
  startTime: DateTime!
  tags: [String!]!
  title: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserLocationModel {
  city: String!
  country: String!
  latidute: Float!
  longitude: Float!
}

type UserModel {
  avatar: String
  bio: String
  birthDate: DateTime
  createdAt: DateTime!
  deactivatedAt: DateTime
  displayName: String!
  email: String!
  id: ID!
  isAdmin: Boolean!
  isDeactivated: Boolean!
  isEmailVerified: Boolean!
  isTotpEnabled: Boolean!
  isVerified: Boolean!
  notificationSettings: NotificationSettingsModel
  notifications: [NotificationModel!]
  password: String!
  socialLinks: [SocialLinkModel!]
  telegramId: String
  totpSecret: String
  updatedAt: DateTime!
  username: String!
}

input VerificationInput {
  token: String!
}